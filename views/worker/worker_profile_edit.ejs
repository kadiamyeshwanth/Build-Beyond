<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Architect Profile Form</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            color: #2c3e50;
        }
        .form-section {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        .form-section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
        }
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        .profile-image-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }
        .profile-preview {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background-color: #eee;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            overflow: hidden;
        }
        .profile-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .project-item {
            border: 1px solid #eee;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        .project-image-preview {
            width: 100%;
            height: 200px;
            background-color: #eee;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 10px;
            overflow: hidden;
        }
        .project-image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        button {
            background-color: #2c3e50;
            color: white;
            border: none;
            padding: 12px 20px;
            font-size: 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #1a2634;
        }
        .add-project-btn {
            background-color: #27ae60;
            margin-bottom: 20px;
        }
        .add-project-btn:hover {
            background-color: #219653;
        }
        .remove-project-btn {
            background-color: #e74c3c;
            margin-top: 10px;
        }
        .remove-project-btn:hover {
            background-color: #c0392b;
        }
        .submit-btn {
            width: 100%;
            padding: 15px;
            font-size: 18px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Architect Profile Form</h1>
        
        <form id="architectForm">
            <!-- Personal Info Section -->
            <div class="form-section">
                <h2>Personal Information</h2>
                
                <div class="profile-image-container">
                    <div class="profile-preview" id="profilePreview">
                        <span id="profilePlaceholder">Profile Photo</span>
                    </div>
                    <input type="file" id="profileImage" accept="image/*">
                </div>
                
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" required>
                </div>
                
                <div class="form-group">
                    <label for="title">Professional Title</label>
                    <input type="text" id="title" name="title" required>
                </div>
                
                <div class="form-group">
                    <label for="experience">Years of Experience</label>
                    <input type="number" id="experience" name="experience" min="1" required>
                </div>
            <!-- About Section -->
            <div class="form-section">
                <h2>About</h2>
                
                <div class="form-group">
                    <label for="about">Professional Biography</label>
                    <textarea id="about" name="about" required></textarea>
                </div>
                
                <div class="form-group">
                    <label>Specialties (Select all that apply)</label>
                    <div>
                        <input type="checkbox" id="sustainable" name="specialties" value="Sustainable design">
                        <label for="sustainable" style="display: inline;">Sustainable design</label>
                    </div>
                    <div>
                        <input type="checkbox" id="urban" name="specialties" value="Urban planning">
                        <label for="urban" style="display: inline;">Urban planning</label>
                    </div>
                    <div>
                        <input type="checkbox" id="residential" name="specialties" value="Residential architecture">
                        <label for="residential" style="display: inline;">Residential architecture</label>
                    </div>
                    <div>
                        <input type="checkbox" id="commercial" name="specialties" value="Commercial architecture">
                        <label for="commercial" style="display: inline;">Commercial architecture</label>
                    </div>
                    <div>
                        <input type="checkbox" id="interior" name="specialties" value="Interior design">
                        <label for="interior" style="display: inline;">Interior design</label>
                    </div>
                    <div>
                        <input type="checkbox" id="landscape" name="specialties" value="Landscape architecture">
                        <label for="landscape" style="display: inline;">Landscape architecture</label>
                    </div>
                </div>
            </div>
            
            <!-- Projects Section -->
            <div class="form-section">
                <h2>Notable Projects</h2>
                <button type="button" class="add-project-btn" id="addProjectBtn">+ Add Project</button>
                
                <div id="projectsContainer">
                    <!-- Projects will be added here dynamically -->
                </div>
            </div>
            
            <button type="submit" class="submit-btn">Create Profile</button>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Profile Image Preview
            const profileImage = document.getElementById('profileImage');
            const profilePreview = document.getElementById('profilePreview');
            const profilePlaceholder = document.getElementById('profilePlaceholder');
            
            profileImage.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        profilePlaceholder.style.display = 'none';
                        
                        // Check if an image already exists
                        let img = profilePreview.querySelector('img');
                        if (!img) {
                            img = document.createElement('img');
                            profilePreview.appendChild(img);
                        }
                        
                        img.src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // Rating Stars
            const stars = document.querySelectorAll('.star');
            const ratingValue = document.getElementById('ratingValue');
            let currentRating = 0;
            
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseFloat(this.getAttribute('data-value'));
                    currentRating = value;
                    updateStars();
                    ratingValue.textContent = `(${value.toFixed(1)})`;
                });

                star.addEventListener('mouseover', function() {
                    const value = parseFloat(this.getAttribute('data-value'));
                    updateStarsHover(value);
                });

                star.addEventListener('mouseout', function() {
                    updateStars();
                });
            });
            
            function updateStars() {
                stars.forEach(star => {
                    const value = parseFloat(star.getAttribute('data-value'));
                    if (value <= currentRating) {
                        star.classList.add('active');
                    } else {
                        star.classList.remove('active');
                    }
                });
            }
            
            function updateStarsHover(hoverValue) {
                stars.forEach(star => {
                    const value = parseFloat(star.getAttribute('data-value'));
                    if (value <= hoverValue) {
                        star.classList.add('active');
                    } else {
                        star.classList.remove('active');
                    }
                });
            }
            
            // Add Project Functionality
            const addProjectBtn = document.getElementById('addProjectBtn');
            const projectsContainer = document.getElementById('projectsContainer');
            let projectCount = 0;
            
            addProjectBtn.addEventListener('click', function() {
                projectCount++;
                
                const projectItem = document.createElement('div');
                projectItem.className = 'project-item';
                projectItem.id = `project-${projectCount}`;
                
                projectItem.innerHTML = `
                    <div class="form-group">
                        <label for="projectName-${projectCount}">Project Name</label>
                        <input type="text" id="projectName-${projectCount}" name="projectName-${projectCount}" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="projectYear-${projectCount}">Year</label>
                        <input type="number" id="projectYear-${projectCount}" name="projectYear-${projectCount}" min="1900" max="2100" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="projectLocation-${projectCount}">Location</label>
                        <input type="text" id="projectLocation-${projectCount}" name="projectLocation-${projectCount}" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="projectDescription-${projectCount}">Description</label>
                        <textarea id="projectDescription-${projectCount}" name="projectDescription-${projectCount}" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="projectImage-${projectCount}">Project Image</label>
                        <input type="file" id="projectImage-${projectCount}" name="projectImage-${projectCount}" accept="image/*" class="project-image-input">
                        <div class="project-image-preview" id="projectImagePreview-${projectCount}">
                            <span>Project Image</span>
                        </div>
                    </div>
                    
                    <button type="button" class="remove-project-btn" data-project="${projectCount}">Remove Project</button>
                `;
                
                projectsContainer.appendChild(projectItem);
                
                // Add event listener for project image preview
                const projectImageInput = document.getElementById(`projectImage-${projectCount}`);
                const projectImagePreview = document.getElementById(`projectImagePreview-${projectCount}`);
                
                projectImageInput.addEventListener('change', function() {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            projectImagePreview.innerHTML = '';
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            projectImagePreview.appendChild(img);
                        };
                        reader.readAsDataURL(file);
                    }
                });
                
                // Add event listener for remove project button
                const removeBtn = projectItem.querySelector('.remove-project-btn');
                removeBtn.addEventListener('click', function() {
                    const projectId = this.getAttribute('data-project');
                    const projectToRemove = document.getElementById(`project-${projectId}`);
                    projectsContainer.removeChild(projectToRemove);
                });
            });
            
            document.getElementById('architectForm').addEventListener('submit', async function(e) {
            e.preventDefault();
    
            // Validate form
            if (!validateForm()) {
                return;
            }
    
            // Get worker ID from session storage
            const workerId = "<%=user._id%>";
            if (!workerId) {
                alert('Please log in to update your profile');
                window.location.href = '/login'; // Redirect to login
                return;
            }
    
            // Get form data
            const formData = new FormData(this);
    
            // Prepare projects data
            const projects = [];
            const projectElements = document.querySelectorAll('.project-item');
            
            projectElements.forEach(projectEl => {
                projects.push({
                    name: projectEl.querySelector('input[name^="projectName"]').value,
                    year: projectEl.querySelector('input[name^="projectYear"]').value,
                    location: projectEl.querySelector('input[name^="projectLocation"]').value,
                    description: projectEl.querySelector('textarea[name^="projectDescription"]').value
                });
            });
    
            // Append projects data to formData
            formData.append('projects', JSON.stringify(projects));
            
            try {
                // Add loading state
                const submitBtn = document.querySelector('.submit-btn');
                submitBtn.disabled = true;
                submitBtn.textContent = 'Updating...';
                
                // Submit to backend
                const response = await fetch(`/api/update-profile/${workerId}`, { // Updated endpoint
                    method: 'PUT',
                    body: formData, // or JSON.stringify({ ...formData, projects })
                    headers: {
                        'Authorization': `Bearer ${sessionStorage.getItem('token')}`,
                        'Content-Type': 'application/json' // If sending JSON
                        }
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Show success message
                    document.getElementById('successMessage').style.display = 'block';
                    // Optionally update session data if needed
                    sessionStorage.setItem('workerData', JSON.stringify(result.worker));
                    
                    // Reset form state
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Profile Updated Successfully';
                    setTimeout(() => {
                        submitBtn.textContent = 'Update Profile';
                    }, 3000);
                } else {
                    throw new Error(result.message || 'Failed to update profile');
                }
            } catch (error) {
                console.error('Error:', error);
                alert(error.message);
                document.querySelector('.submit-btn').disabled = false;
                document.querySelector('.submit-btn').textContent = 'Update Profile';
            }
        });
            });
    </script>
</body>
</html>